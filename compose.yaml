version: "3.3"

services:
  api:
    build:
      context: .
      dockerfile: ./docker/Dockerfile.fastapi
    container_name: fastapi
    ports:
      - "8081:8081"
    depends_on:
      - airflow
    networks:
      - frontend
      - backend
    env_file:
      - ./access_token.env

  airflow:
    build:
      context: .
      dockerfile: ./docker/Dockerfile.airflow
    container_name: airflow
    ports:
      - "8080:8080"
    depends_on:
      - mlflow
    volumes:
      - ./dags:/opt/airflow/dags
    networks:
      - frontend
      - backend
    command: standalone
    env_file:
      - ./access_token.env

  mlflow:
    restart: always
    build: 
      context: .
      dockerfile: ./docker/Dockerfile.mlflow
    container_name: mlflow_server
    depends_on:
      - db
    ports:
      - "5000:5000"
    networks:
      - frontend
      - backend
    environment:
      - AWS_ACCESS_KEY_ID=minioadmin
      - AWS_SECRET_ACCESS_KEY=minioadmin
      - MLFLOW_S3_ENDPOINT_URL=http://s3:9000
      - MLFLOW_S3_IGNORE_TLS=true
    command: >
      mlflow server
      --backend-store-uri postgresql://mlflow:mlflow@db:5432/mlflow
      --host 0.0.0.0
      --artifacts-destination s3://mlflow
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/"]
      interval: 30s
      timeout: 10s
      retries: 3

  db:
    restart: always
    image: postgres
    container_name: mlflow_db
    expose:
      - "5432"
    networks:
      - backend
    environment:
      - POSTGRES_USER=mlflow
      - POSTGRES_PASSWORD=mlflow
      - POSTGRES_DATABASE=mlflow
    volumes:
      - ./db_data:/var/lib/postgresql/data/
    healthcheck:
      test: ["CMD", "pg_isready", "-p", "5432", "-U", "mlflow"]
      interval: 5s
      timeout: 5s
      retries: 3

  s3:
    restart: always
    image: minio/minio
    entrypoint: sh
    command: -c "mkdir -p /data/mlflow && /opt/bin/minio server /data"
    container_name: mlflow_minio
    volumes:
      - ./minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - frontend
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

volumes:
  db_data: 
  minio_data: 

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge